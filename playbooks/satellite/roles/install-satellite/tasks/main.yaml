- name: Check if persistent variables file exists
  delegate_to: localhost
  stat:
    path: "{{ playbook_dir }}/persistent.yaml"
  register: persistent_exists

- name: Import persistent variables
  when: persistent_exists.stat.exists
  include_vars:
    file: "{{ playbook_dir }}/persistent.yaml"

- name: Verify OS is supported
  fail:
    msg: OS version is not supported. Only RHEL {{ supported_os | join(', ') }} are supported
  when: ansible_distribution_major_version not in supported_os
  tags:
    - verify-os

#- name: Enable Red Hat Satellite subscription
#  when: activation['activation_key'] is defined or activation['username'] is defined
#  redhat_subscription:
#    state: present
#    activationkey: "{{ activation.activation_key | default(omit) }}"
#    org_id: "{{ activation.org_id | default(omit) }}"
#    username: "{{ activation.username | default(omit) }}"
#    password: "{{ activation.password | default(omit) }}"
#    pool: '^Red Hat Satellite.*$'
#    #pool: '^.*Red Hat Ansible Automation Platform.*$'
#  tags:
#    - subscribe-sat

- name: Enable Repos for RHEL 7
  become: true
  when: ansible_distribution_major_version == "7"
  rhsm_repository:
    purge: yes
    name: "{{ repos7 }}"
  tags:
    - sat-repos

- name: Enable Repos for RHEL 8
  become: true
  when: ansible_distribution_major_version == "8"
  rhsm_repository:
    purge: yes
    name: "{{ repos8 }}"
  tags:
    - sat-repos

- name: Enable RHEL 8 modules
  become: true
  when: ansible_distribution_major_version == "8"
  command:
    cmd: "dnf module enable -y {{ modules8 | join(' ') }}"
  tags:
    - sat-repos

#- name: Update all packages
#  become: true
#  package:
#    name: '*'
#    state: latest
#  tags:
#    - update

- name: Install sos package
  become: true
  package:
    name: sos
    state: installed
  tags:
    - packages

- name: Ensure selinux is disabled
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: SELINUX=permissive
  register: selinux

- name: Reboot server
  when: selinux.changed
  ansible.builtin.reboot:

- name: Pausing to allow server to shutdown and terminate our SSH connection
  when: selinux.changed
  pause: seconds=30

- name: Wait for reboot to complete and SSH to become available
  when: selinux.changed
  ansible.builtin.wait_for_connection:

- name: Install Satellite package
  become: true
  package:
    name: satellite
    state: installed
  tags:
    - packages

- name: Stage variables
  set_fact:
    extra_args: ""

- name: Enable Compute Resources
  when: '"--enable-foreman-compute-{{ item.type }}" not in extra_args'
  set_fact:
    extra_args: "{{ extra_args }} --enable-foreman-compute-{{ item.type }}"
  with_items: "{{ compute_resources }}"
  tags:
    - compute

- name: Check certificate requirements
  when: certificate is defined and certificate != {}
  tags:
    - custom-certificate
  block:
  - name: Check cert_file
    when: certificate.cert_file is not defined or certificate.cert_file == ""
    fail:
      msg: "certificate.cert_file must be defined"
  
  - name: Check key_file
    when: certificate.key_file is not defined or certificate.key_file == ""
    fail:
      msg: certificate.key_file must be defined
  
  - name: Check ca_bundle
    when: certificate.ca_bundle is not defined or certificate.ca_bundle == ""
    fail:
      msg: certificate.ca_bundle must be defined

  - name: Create certificate location on server
    become: true
    ansible.builtin.file:
      path: /root/satellite_certificate
      state: directory
      mode: '0700'

  - name: Copy cert_file to server
    become: true
    copy:
      src: "{{ certificate.cert_file }}"
      dest: "/root/satellite_certificate/cert_file.pem"

  - name: Copy key_file to server
    become: true
    copy:
      src: "{{ certificate.key_file }}"
      dest: "/root/satellite_certificate/key_file.pem"

  - name: Copy ca_bundle to server
    become: true
    copy:
      src: "{{ certificate.ca_bundle }}"
      dest: "/root/satellite_certificate/ca_bundle.pem"

  - name: Enable Custom Certificate
    set_fact:
      extra_args: "{{ extra_args }} --certs-server-cert /root/satellite_certificate/cert_file.pem --certs-server-key /root/satellite_certificate/key_file.pem --certs-server-ca-cert /root/satellite_certificate/ca_bundle.pem"

- name: Set useful features
  set_fact:
    extra_args: "{{ extra_args }} --{{ item }}"
  with_items: "{{ useful_features }}"
  tags:
    - useful-features

- name: Set additional features
  set_fact:
    extra_args: "{{ extra_args }} --{{ item }}"
  with_items: "{{ additional_features }}"
  tags:
    - additional-features

# TODO: If DHCP and DNS, set DHCP option for DNS
# --foreman-proxy-dhcp-nameservers {{ self-ip }}

- name: Generate and save admin password
  when: admin_password is not defined or admin_password == ""
  block:
    - name: Generate random password
      set_fact:
        gen_password: "{{ lookup('ansible.builtin.password', '/dev/null length=20') }}"
    - name: Create persistent.yaml
      local_action:
        module: file
        path: "{{ playbook_dir }}/persistent.yaml"
        state: touch
    - name: Save password
      local_action:
        module: lineinfile
        path: "{{ playbook_dir }}/persistent.yaml"
        line: "admin_password: {{ gen_password }}"
    - name: Store password
      set_fact:
        admin_password: "{{ gen_password }}"

- name: Install Satellite
  become: true
  command:
    cmd: satellite-installer --scenario satellite {{ extra_args }} --foreman-initial-organization {{ organization | quote }} --foreman-initial-location {{ location | quote }} --foreman-initial-admin-username {{ admin_username | quote }} --foreman-initial-admin-password {{ admin_password | quote }}
  tags:
    - install-satellite

- name: Install redhat-access-insights-puppet
  become: true
  ansible.builtin.dnf:
    name: redhat-access-insights-puppet
    state: installed
    disable_plugin: foreman-protector

- name: Get service information
  ansible.builtin.service_facts:
  register: service_facts

- name: Add RH-Satellite-6 service to firewalld
  when: service_facts.ansible_facts.services['firewalld.service']['state'] == 'running'
  ansible.posix.firewalld:
    service: RH-Satellite-6
    permanent: yes
    state: enabled

- name: Add RH-Satellite-6 service to running firewalld
  when: service_facts.ansible_facts.services['firewalld.service']['state'] == 'running'
  ansible.posix.firewalld:
    service: RH-Satellite-6
    permanent: no
    state: enabled

#TODO: If DHCP server, add dhcp firewalld service